// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  nickName      String         @unique()
  passwordHash  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        UserStatus     @default(OFFLINE)
  avatarImg     String?
  eloScore      Int            @default(0)

  friendsRequester  Friendship[]        @relation("requester")
  friendsAddressee  Friendship[]        @relation("addressee")
  playerOnMatches   UserMatch[]         @relation("player")
  achievements      UserAchievement[]   @relation("userAchievement")
  messagesSent      Message[]           @relation("messageSender")
  userOnChannels    ChannelUser[]       @relation("userOnChannel")
  banRequester      Ban[]               @relation("banRequester")
  bannedUser        Ban[]               @relation("bannedUser")
}

model Friendship {
  requesterId String
  requester   User              @relation("requester", fields: [requesterId], references: [id], onDelete: Cascade)
  addresseeId String
  addressee   User              @relation("addressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  @@id([requesterId, addresseeId])

  status      FriendshipStatus  @default(REQUESTED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Match {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  match     UserMatch[]   @relation("match")
  score     Json          @default("{\"player1\" : 0, \"player2\" : 0}")
}

model UserMatch {
  playerId  String
  player    User          @relation("player", fields: [playerId], references: [id], onDelete: Cascade)
  matchId   String
  match     Match         @relation("match", fields: [matchId], references: [id], onDelete: Cascade)
  @@id([playerId, matchId])

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Achievement {
  id                String              @id @default(cuid())
  achievement       UserAchievement[]   @relation("userAchievement")
  label             String
  image             String?
}

model UserAchievement {
  userId            String
  user              User          @relation("userAchievement", fields: [userId], references: [id], onDelete: Cascade)
  achievementId     String
  achievement       Achievement   @relation("userAchievement", fields: [achievementId], references: [id], onDelete: Cascade)
  @@id([userId, achievementId])

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Channel {
  id                String        @id @default(cuid())
  type              ChannelType   @default(PUBLIC)
  passwordHash      String

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  messages          Message[]     @relation("channelMessage")
  users             ChannelUser[] @relation("channelUsers")
  channelBans       Ban[]         @relation("banOnChannel")
}

model Message {
  id                String        @id @default(cuid())
  content           String

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  senderId          String
  sender            User          @relation("messageSender", fields: [senderId], references: [id], onDelete: Cascade)
  channelId         String
  channel           Channel       @relation("channelMessage", fields: [channelId], references: [id], onDelete: Cascade)
}

model ChannelUser {
  userId          String
  user            User          @relation("userOnChannel", fields: [userId], references: [id], onDelete: Cascade)
  channelId       String
  channel         Channel       @relation("channelUsers", fields: [channelId], references: [id], onDelete: Cascade)
  @@id([userId, channelId])

  role              ChannelRole   @default(USER)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Ban {
  bannedUserId      String
  bannedUser        User          @relation("bannedUser", fields: [bannedUserId], references: [id], onDelete: Cascade)
  banChannelId      String
  banChannel        Channel       @relation("banOnChannel", fields: [banChannelId], references: [id], onDelete: Cascade)
  @@id([bannedUserId, banChannelId])

  banRequesterId    String
  banRequester      User          @relation("banRequester", fields: [banRequesterId], references: [id], onDelete: SetNull)

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum FriendshipStatus {
  REQUESTED
  ACCEPTED
  REFUSED
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PROTECTED
  DIRECTMESSAGE
}

enum UserStatus {
  OFFLINE
  ONLINE
  PLAYING
}

enum ChannelRole {
  USER
  ADMIN
  OWNER
}

