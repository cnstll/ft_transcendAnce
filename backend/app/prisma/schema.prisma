// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  nickName      String         @unique()
  passwordHash  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        UserStatus     @default(OFFLINE)
  avatarImg     String?
  wins          Int?
  losts         Int?
  eloScore      Int?           @default(0)

  friendRequester Friendship[]      @relation("requester")
  friendAddressee Friendship[]      @relation("addressee")
  playerOnMatches UserMatch[]       @relation("player")
  achievements    UserAchievement[] @relation("userAchievement")
  messages        Message[]         @relation("userMessage")
  
}

model Friendship {
  requesterId String
  requester   User              @relation("requester", fields: [requesterId], references: [id], onDelete: Cascade)
  addresseeId String
  addressee   User              @relation("addressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  @@id([requesterId, addresseeId])

  status      FriendshipStatus  @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Match {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  match     UserMatch[]   @relation("match")
  score     Json          @default("{\"player1\" : 0, \"player2\" : 0}")
}

model UserMatch {
  playerId  String
  player    User          @relation("player", fields: [playerId], references: [id], onDelete: Cascade)
  matchId   String
  match     Match         @relation("match", fields: [matchId], references: [id], onDelete: Cascade)
  @@id([playerId, matchId])

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Achievement {
  id                String              @id @default(cuid())
  achievement       UserAchievement[]   @relation("userAchievement")
  label             String
  image             String
}

model UserAchievement {
  userId            String
  user              User          @relation("userAchievement", fields: [userId], references: [id], onDelete: Cascade)
  achievementId     String
  achievement       Achievement   @relation("userAchievement", fields: [achievementId], references: [id], onDelete: Cascade)
  @@id([userId, achievementId])

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Message {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation("userMessage", fields: [userId], references: [id], onDelete: Cascade)

}

enum ChanelPrivilegeCode {
  ADMIN
  USER
  OWNER
}

enum FriendshipStatus {
  PENDING
  REQUESTED
  ACCEPTED
  REFUSED
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PROTECTED
  DIRECTMESSAGE
}

enum UserStatus {
  OFFLINE
  ONLINE
  PLAYING
}

enum ChannelRole {
  DEFAULT
  ADMIN
  OWNER
}

